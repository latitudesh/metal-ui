"use strict";var _rollupPluginBabelHelpers=require("../_virtual/_rollupPluginBabelHelpers.js"),react=require("@emotion/react"),React=require("react"),PropTypes=require("prop-types"),classNames=require("classnames"),index$3=require("../Button/index.js"),index=require("../Input/index.js"),index$1=require("../Textarea/index.js"),index$2=require("../Text/index.js"),f929=require("./svgs/f929.js"),f600=require("./svgs/f600.js"),f615=require("./svgs/f615.js"),f62d=require("./svgs/f62d.js"),radio=require("@react-stately/radio"),radio$1=require("@react-aria/radio"),visuallyHidden=require("@react-aria/visually-hidden"),focus=require("@react-aria/focus"),FeedbackButton=require("./FeedbackButton.js"),PopoverPrimitive=require("@radix-ui/react-popover"),reactUse=require("react-use");function _interopDefaultLegacy(I){return I&&"object"==typeof I&&"default"in I?I:{default:I}}function _interopNamespace(C){if(C&&C.__esModule)return C;var A=Object.create(null);return C&&Object.keys(C).forEach(function(I){var g;"default"!==I&&(g=Object.getOwnPropertyDescriptor(C,I),Object.defineProperty(A,I,g.get?g:{enumerable:!0,get:function(){return C[I]}}))}),A.default=C,Object.freeze(A)}var React__default=_interopDefaultLegacy(React),PropTypes__default=_interopDefaultLegacy(PropTypes),classNames__default=_interopDefaultLegacy(classNames),PopoverPrimitive__namespace=_interopNamespace(PopoverPrimitive);function _EMOTION_STRINGIFIED_CSS_ERROR__(){return"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."}const EMOJIS=[{code:"f929",char:"ðŸ¤©",svg:f929,label:"very-happy"},{code:"f600",char:"ðŸ™‚",svg:f600,label:"happy"},{code:"f615",char:"ðŸ˜•",svg:f615,label:"meh"},{code:"f62d",char:"ðŸ˜­",svg:f62d,label:"unhappy"}];let RadioContext=React__default.default.createContext(null);var _ref="production"===process.env.NODE_ENV?{name:"34i93t",styles:"display:flex;> :not([hidden]) ~ :not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.5rem * var(--tw-space-x-reverse));margin-left:calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));}"}:{name:"1vfyrxy-EmojiRadioGroup",styles:"display:flex;> :not([hidden]) ~ :not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.5rem * var(--tw-space-x-reverse));margin-left:calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));};label:EmojiRadioGroup;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVDOEIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeFJ1bnRpbWUgY2xhc3NpYyAqL1xuLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyBqc3ggfSBmcm9tIFwiQGVtb3Rpb24vcmVhY3RcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgY24gZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCB0dyBmcm9tIFwidHdpbi5tYWNyb1wiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vQnV0dG9uXCI7XG5pbXBvcnQgSW5wdXQgZnJvbSBcIi4uL0lucHV0XCI7XG5pbXBvcnQgVGV4dGFyZWEgZnJvbSBcIi4uL1RleHRhcmVhXCI7XG5pbXBvcnQgVGV4dCBmcm9tIFwiLi4vVGV4dFwiO1xuaW1wb3J0IGY5MjkgZnJvbSBcIi4vc3Zncy9mOTI5LmpzXCI7XG5pbXBvcnQgZjYwMCBmcm9tIFwiLi9zdmdzL2Y2MDAuanNcIjtcbmltcG9ydCBmNjE1IGZyb20gXCIuL3N2Z3MvZjYxNS5qc1wiO1xuaW1wb3J0IGY2MmQgZnJvbSBcIi4vc3Zncy9mNjJkLmpzXCI7XG5pbXBvcnQgeyB1c2VSYWRpb0dyb3VwU3RhdGUgfSBmcm9tIFwiQHJlYWN0LXN0YXRlbHkvcmFkaW9cIjtcbmltcG9ydCB7IHVzZVJhZGlvLCB1c2VSYWRpb0dyb3VwIH0gZnJvbSBcIkByZWFjdC1hcmlhL3JhZGlvXCI7XG5pbXBvcnQgeyBWaXN1YWxseUhpZGRlbiB9IGZyb20gXCJAcmVhY3QtYXJpYS92aXN1YWxseS1oaWRkZW5cIjtcbmltcG9ydCB7IHVzZUZvY3VzUmluZyB9IGZyb20gXCJAcmVhY3QtYXJpYS9mb2N1c1wiO1xuaW1wb3J0IEZlZWRiYWNrQnV0dG9uIGZyb20gXCIuL0ZlZWRiYWNrQnV0dG9uXCI7XG5pbXBvcnQgKiBhcyBQb3BvdmVyUHJpbWl0aXZlIGZyb20gXCJAcmFkaXgtdWkvcmVhY3QtcG9wb3ZlclwiO1xuaW1wb3J0IHsgdXNlQ2xpY2tBd2F5IH0gZnJvbSBcInJlYWN0LXVzZVwiO1xuXG5jb25zdCBFTU9KSVMgPSBbXG4gIHsgY29kZTogXCJmOTI5XCIsIGNoYXI6IFwi8J+kqVwiLCBzdmc6IGY5MjksIGxhYmVsOiBcInZlcnktaGFwcHlcIiB9LFxuICB7IGNvZGU6IFwiZjYwMFwiLCBjaGFyOiBcIvCfmYJcIiwgc3ZnOiBmNjAwLCBsYWJlbDogXCJoYXBweVwiIH0sXG4gIHsgY29kZTogXCJmNjE1XCIsIGNoYXI6IFwi8J+YlVwiLCBzdmc6IGY2MTUsIGxhYmVsOiBcIm1laFwiIH0sXG4gIHsgY29kZTogXCJmNjJkXCIsIGNoYXI6IFwi8J+YrVwiLCBzdmc6IGY2MmQsIGxhYmVsOiBcInVuaGFwcHlcIiB9LFxuXTtcblxubGV0IFJhZGlvQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbi8vIGh0dHBzOi8vcmVhY3Qtc3BlY3RydW0uYWRvYmUuY29tL3JlYWN0LWFyaWEvdXNlUmFkaW9Hcm91cC5odG1sI2V4YW1wbGVcbmZ1bmN0aW9uIEVtb2ppUmFkaW9Hcm91cChwcm9wcykge1xuICBsZXQgeyBjaGlsZHJlbiwgbGFiZWwgfSA9IHByb3BzO1xuICBsZXQgc3RhdGUgPSBwcm9wcy5lbW9qaVN0YXRlO1xuICBsZXQgeyByYWRpb0dyb3VwUHJvcHMsIGxhYmVsUHJvcHMgfSA9IHVzZVJhZGlvR3JvdXAocHJvcHMsIHN0YXRlKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgey4uLnJhZGlvR3JvdXBQcm9wc30gY3NzPXtbdHdgZmxleCBzcGFjZS14LTJgXX0+XG4gICAgICA8UmFkaW9Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+e2NoaWxkcmVufTwvUmFkaW9Db250ZXh0LlByb3ZpZGVyPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBFbW9qaVJhZGlvKHByb3BzKSB7XG4gIGxldCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChSYWRpb0NvbnRleHQpO1xuICBsZXQgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBsZXQgeyBpbnB1dFByb3BzIH0gPSB1c2VSYWRpbyhwcm9wcywgc3RhdGUsIHJlZik7XG4gIGxldCB7IGlzRm9jdXNWaXNpYmxlLCBmb2N1c1Byb3BzIH0gPSB1c2VGb2N1c1JpbmcoKTtcbiAgY29uc3Qgc2VsZWN0ZWQgPSBzdGF0ZS5zZWxlY3RlZFZhbHVlID09PSBwcm9wcy52YWx1ZTtcblxuICByZXR1cm4gKFxuICAgIDxsYWJlbFxuICAgICAgb25Gb2N1cz17cHJvcHMub25Gb2N1c31cbiAgICAgIGNzcz17W1xuICAgICAgICB0d2BpbmxpbmUtZmxleCBiZy10cmFuc3BhcmVudCBwLTAgbS0wIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTEwMCBlYXNlLWluLW91dCBib3JkZXIgYm9yZGVyLWJvcmRlciB0cmFuc2Zvcm0gY3Vyc29yLXBvaW50ZXIgdGV4dC1jZW50ZXIgcm91bmRlZC1mdWxsYCxcbiAgICAgICAgdHdgaG92ZXI6c2NhbGUtMTA1IGFjdGl2ZTpzY2FsZS0xMDUgaG92ZXI6Ymctd2hpdGUgYWN0aXZlOmJnLXdoaXRlIG91dGxpbmUtbm9uZSBmb2N1czpvdXRsaW5lLW5vbmUgYCxcbiAgICAgICAgc2VsZWN0ZWQgJiYgdHdgc2NhbGUtMTEwIGJvcmRlciBiZy13aGl0ZSBib3JkZXItd2FybmluZy1saWdodGAsXG4gICAgICAgIGlzRm9jdXNWaXNpYmxlICYmIHR3YHJpbmctMmAsXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxWaXN1YWxseUhpZGRlbj5cbiAgICAgICAgPGlucHV0IHsuLi5pbnB1dFByb3BzfSB7Li4uZm9jdXNQcm9wc30gcmVmPXtyZWZ9IC8+XG4gICAgICA8L1Zpc3VhbGx5SGlkZGVuPlxuICAgICAgPGRpdj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICB0dz17XCJmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwifVxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAzMiwgaGVpZ2h0OiAzMiwgYm9yZGVyUmFkaXVzOiBcIjUwJVwiIH19XG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvbGFiZWw+XG4gICk7XG59XG5cbmNvbnN0IEZlZWRiYWNrID0gKHtcbiAgdXJsLFxuICBlbWFpbCxcbiAgZW5hYmxlRmVlZGJhY2tUZXh0ID0gdHJ1ZSxcbiAgZW5hYmxlRW1vamkgPSB0cnVlLFxuICBzaWRlID0gXCJib3R0b21cIixcbiAgc2lkZU9mZnNldCA9IDUsXG4gIGFsaWduID0gXCJzdGFydFwiLFxuICBlbWFpbFByb3BzLFxuICBmZWVkYmFja1RleHRQcm9wcyxcbiAgc3VibWl0QnV0dG9uUHJvcHMsXG4gIGRyeVJ1biA9IGZhbHNlLFxuICBjaGlsZHJlbixcbiAgLi4ucHJvcHNcbn0pID0+IHtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzdWNjZXNzLCBzZXRTdWNjZXNzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Vycm9yTWVzc2FnZSwgc2V0RXJyb3JNZXNzYWdlXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBlbmFibGVFbWFpbCA9ICFlbWFpbDtcbiAgY29uc3QgZW1haWxJbml0aWFsVmFsdWUgPSBlbWFpbCA/IGVtYWlsIDogXCJcIjtcbiAgY29uc3QgW2VtYWlsVmFsdWUsIHNldEVtYWlsVmFsdWVdID0gdXNlU3RhdGUoZW1haWxJbml0aWFsVmFsdWUpO1xuICBjb25zdCBbZmVlZGJhY2tUZXh0LCBzZXRGZWVkYmFja1RleHRdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IGVtb2ppU3RhdGUgPSB1c2VSYWRpb0dyb3VwU3RhdGUocHJvcHMpO1xuICBjb25zdCBmb3JtUmVmID0gdXNlUmVmKCk7XG5cbiAgY29uc3QgY29tYmluZWRFbWFpbFByb3BzID0ge1xuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIGxhYmVsOiBcIkVtYWlsXCIsXG4gICAgYXV0b0ZvY3VzOiB0cnVlLFxuICAgIHBsYWNlaG9sZGVyOiBcIllvdXIgZW1haWwgYWRkcmVzcy4uLlwiLFxuICAgIC4uLmVtYWlsUHJvcHMsXG4gIH07XG5cbiAgY29uc3QgY29tYmluZWRGZWVkYmFja1RleHRQcm9wcyA9IHtcbiAgICBsYWJlbDogXCJGZWVkYmFja1wiLFxuICAgIHBsYWNlaG9sZGVyOiBcIllvdXIgZmVlZGJhY2suLi5cIixcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICByb3dzOiAzLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBcIkZlZWRiYWNrIGlucHV0XCIsXG4gICAgLy8gRGlzYWJsZSB0aGUgR3JhbW1hcmx5IGV4dGVuc2lvbiBvbiB0aGlzIHRleHRhcmVhXG4gICAgXCJkYXRhLWdyYW1tLWVkaXRvclwiOiBmYWxzZSxcbiAgICAuLi5mZWVkYmFja1RleHRQcm9wcyxcbiAgfTtcblxuICBjb25zdCBjb21iaW5lZFN1Ym1pdEJ1dHRvblByb3BzID0ge1xuICAgIGxhYmVsOiBcIlNlbmRcIixcbiAgICB2YXJpYW50OiBcImRlZmF1bHRcIixcbiAgICAuLi5zdWJtaXRCdXR0b25Qcm9wcyxcbiAgfTtcblxuICBjb25zdCBvbkVycm9yRGlzbWlzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRFcnJvck1lc3NhZ2UoXCJcIik7XG4gIH0sIFtdKTtcblxuICBjb25zdCBvblN1Y2Nlc3NEaXNtaXNzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFN1Y2Nlc3MoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgY2xvc2VGZWVkYmFja0Zvcm0gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0T3BlbihmYWxzZSk7XG4gICAgb25FcnJvckRpc21pc3MoKTtcbiAgICBvblN1Y2Nlc3NEaXNtaXNzKCk7XG4gIH0sIFtvbkVycm9yRGlzbWlzcywgb25TdWNjZXNzRGlzbWlzc10pO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChmZWVkYmFja1RleHQudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICBzZXRFcnJvck1lc3NhZ2UoXCJZb3VyIGZlZWRiYWNrIGNhbid0IGJlIGVtcHR5XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldExvYWRpbmcodHJ1ZSk7XG5cbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgdXJsOiB1cmwsXG4gICAgICBub3RlOiBmZWVkYmFja1RleHQsXG4gICAgICBlbWFpbDogZW1haWxWYWx1ZSxcbiAgICAgIGVtb3Rpb246IGVtb2ppU3RhdGUuc2VsZWN0ZWRWYWx1ZSxcbiAgICB9O1xuICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChkcnlSdW4pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFNvcnJ5LCB3ZSBjb3VsZG4ndCBzZW5kIHlvdXIgZmVlZGJhY2suIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIC8vIFJlc2V0IHRoZSB0ZXh0YXJlYSBmZWVkYmFja1RleHQgb24gc3VjY2Vzc1xuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgc2V0U3VjY2Vzcyh0cnVlKTtcbiAgICAgICAgc2V0RW1haWxWYWx1ZShlbWFpbEluaXRpYWxWYWx1ZSk7XG4gICAgICAgIHNldEZlZWRiYWNrVGV4dChcIlwiKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgc2V0RXJyb3JNZXNzYWdlKGVyci5tZXNzYWdlKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IG9uS2V5RG93biA9IHVzZUNhbGxiYWNrKFxuICAgIChlKSA9PiB7XG4gICAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgICAgY2xvc2VGZWVkYmFja0Zvcm0oKTtcbiAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIiAmJiBlLm1ldGFLZXkpIHtcbiAgICAgICAgb25TdWJtaXQoZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbY2xvc2VGZWVkYmFja0Zvcm0sIG9uU3VibWl0XVxuICApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5RG93bik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBvbktleURvd24pO1xuICAgIH07XG4gIH0sIFtvbktleURvd25dKTtcblxuICB1c2VDbGlja0F3YXkoZm9ybVJlZiwgY2xvc2VGZWVkYmFja0Zvcm0pO1xuXG4gIGNvbnN0IGRpc2FibGVJbnB1dHMgPSBCb29sZWFuKGxvYWRpbmcgfHwgZXJyb3JNZXNzYWdlKTtcblxuICBjb25zdCBoYW5kbGVUcmlnZ2VyQnV0dG9uID0gKHRvb2dsZVBvcG92ZXIpID0+IHtcbiAgICAvL2lmIHVzZXIgaGF2ZSBlcnJvck1lc3NhZ2Ugb3IgYSBzdWNjZXNzIGFuZCBhcmUgY2xvc2luZyB0aGUgcG9wb3ZlciBvbiBidXR0b25UcmlnZ2VyIGNsZWFyIGVycm9yIGFuZCBzdWNjZXNzXG4gICAgaWYgKChlcnJvck1lc3NhZ2UgfHwgc3VjY2VzcykgJiYgIXRvb2dsZVBvcG92ZXIpIHtcbiAgICAgIGNsb3NlRmVlZGJhY2tGb3JtKCk7XG4gICAgfVxuICAgIHNldE9wZW4odG9vZ2xlUG9wb3Zlcik7XG4gIH07XG5cbiAgY29uc3QgVHJpZ2dlckJ1dHRvbiA9IFJlYWN0LmZvcndhcmRSZWYoKF8sIHJlZikgPT5cbiAgICBjaGlsZHJlbiA/IChcbiAgICAgIGNoaWxkcmVuKHsgb3Blbiwgc2V0T3BlbjogaGFuZGxlVHJpZ2dlckJ1dHRvbiwgcmVmOiByZWYgfSlcbiAgICApIDogKFxuICAgICAgPEZlZWRiYWNrQnV0dG9uIG9wZW49e29wZW59IHNldE9wZW49e2hhbmRsZVRyaWdnZXJCdXR0b259IHJlZj17cmVmfSAvPlxuICAgIClcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHRpdGxlPVwiU2hhcmUgYW55IGZlZWRiYWNrIGFib3V0IG91ciBwcm9kdWN0cyBhbmQgc2VydmljZXNcIlxuICAgICAgY3NzPXtbXG4gICAgICAgIHR3YHAtMCByZWxhdGl2ZSBpbmxpbmUtYmxvY2sgYW50aWFsaWFzZWQgZm9jdXM6b3V0bGluZS1ub25lIGFjdGl2ZTpvdXRsaW5lLW5vbmVgLFxuICAgICAgICBlcnJvck1lc3NhZ2UgJiYgdHdgdGV4dC10cmFuc3BhcmVudGAsXG4gICAgICBdfVxuICAgICAgYXJpYS1leHBhbmRlZD17b3Blbn1cbiAgICAgIGRhdGEtdGVzdGlkPVwiY29udGFpbmVyLXBvcG92ZXJcIlxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIDxQb3BvdmVyUHJpbWl0aXZlLlJvb3Qgb25PcGVuQ2hhbmdlPXtjbG9zZUZlZWRiYWNrRm9ybX0gb3Blbj17b3Blbn0+XG4gICAgICAgIDxQb3BvdmVyUHJpbWl0aXZlLlRyaWdnZXIgYXNDaGlsZD5cbiAgICAgICAgICA8VHJpZ2dlckJ1dHRvbiAvPlxuICAgICAgICA8L1BvcG92ZXJQcmltaXRpdmUuVHJpZ2dlcj5cbiAgICAgICAgPFBvcG92ZXJQcmltaXRpdmUuQ29udGVudFxuICAgICAgICAgIHNpZGVPZmZzZXQ9e3NpZGVPZmZzZXR9XG4gICAgICAgICAgc2lkZT17c2lkZX1cbiAgICAgICAgICBhbGlnbj17YWxpZ259XG4gICAgICAgID5cbiAgICAgICAgICA8Zm9ybVxuICAgICAgICAgICAgcmVmPXtmb3JtUmVmfVxuICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgIHR3YGgtYXV0byBib3JkZXItd2hpdGUgYXBwZWFyYW5jZS1ub25lIGJvcmRlci0wIGZsZXggbGVhZGluZy02IHRleHQtc20gcm91bmRlZCBzaGFkb3ctbGcgYmctd2hpdGUgYCxcbiAgICAgICAgICAgICAgdHdgcmVzaXplLW5vbmUgei01MCB0ZXh0LWZvcmVncm91bmQgZmxleC1jb2wganVzdGlmeS1zdGFydCByZWxhdGl2ZWAsXG4gICAgICAgICAgICAgIHR3YGhvdmVyOmJvcmRlci1mb3JlZ3JvdW5kIGZvY3VzOmJvcmRlci1mb3JlZ3JvdW5kIGFjdGl2ZTpib3JkZXItZm9yZWdyb3VuZGAsXG4gICAgICAgICAgICBdfVxuICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IFwiMjJyZW1cIiB9fVxuICAgICAgICAgICAgb25TdWJtaXQ9e29uU3VibWl0fVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJmb3JtXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7IWVycm9yTWVzc2FnZSAmJiAhc3VjY2VzcyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY3NzPXtbdHdgcC00IHJlbGF0aXZlYF19PlxuICAgICAgICAgICAgICAgIHtlbmFibGVFbWFpbCAmJiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2IHR3PXtcIm1iLTJcIn0+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZmVlZGJhY2stZW1haWxcIlxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVJbnB1dHN9XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3NldEVtYWlsVmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2VtYWlsVmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgey4uLmNvbWJpbmVkRW1haWxQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICB7ZW5hYmxlRmVlZGJhY2tUZXh0ICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImlucHV0XCJ9PlxuICAgICAgICAgICAgICAgICAgICA8VGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgICAgICBpZD1cImZlZWRiYWNrLXRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmZWVkYmFja1RleHR9XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRGZWVkYmFja1RleHQoZSl9XG4gICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVJbnB1dHN9XG4gICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSB0aGUgR3JhbW1hcmx5IGV4dGVuc2lvbiBvbiB0aGlzIHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWFDbGFzc05hbWU9e2NuKFwiZmVlZGJhY2staW5wdXRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0LWJyYW5kLWdyYXlcIjogbG9hZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICB7Li4uY29tYmluZWRGZWVkYmFja1RleHRQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAge2Vycm9yTWVzc2FnZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB0dz17XG4gICAgICAgICAgICAgICAgICBcImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNCB0ZXh0LWNlbnRlciB6LTUwXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgaXM9XCJwXCJcbiAgICAgICAgICAgICAgICAgIHNtYWxsXG4gICAgICAgICAgICAgICAgICBjb2xvcj1cInRleHQtcmVkLTYwMFwiXG4gICAgICAgICAgICAgICAgICBzdHlsZT17eyBtYXJnaW5Cb3R0b206IFwiOHB4XCIgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7ZXJyb3JNZXNzYWdlfVxuICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICB0eXBlPVwibWluaW1hbFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3JEaXNtaXNzKCk7XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgICAgICAgICAgICBsYWJlbD1cIkdvIGJhY2tcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAge3N1Y2Nlc3MgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgdHc9e1xuICAgICAgICAgICAgICAgICAgXCJmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBwLTQgdGV4dC1jZW50ZXIgei01MFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPFRleHQgc21hbGwgaXM9XCJwXCI+XG4gICAgICAgICAgICAgICAgICBZb3VyIGZlZWRiYWNrIGhhcyBiZWVuIHJlY2VpdmVkIVxuICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICA8VGV4dCBzbWFsbCBpcz1cInBcIj5cbiAgICAgICAgICAgICAgICAgIFRoYW5rIHlvdSBmb3IgeW91ciBoZWxwLlxuICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICB7IXN1Y2Nlc3MgJiYgIWVycm9yTWVzc2FnZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgIHR3YHctZnVsbCBoLTE2IHAtNCBmbGV4IGp1c3RpZnktZW5kIGl0ZW1zLWNlbnRlciBnYXAtNCBiZy1iYWNrZ3JvdW5kIGJvcmRlci10IGJvcmRlci1ib3JkZXIgcG9pbnRlci1ldmVudHMtYXV0b2AsXG4gICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtlbmFibGVFbW9qaSAmJiAoXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e1wiZW1vamlzXCJ9PlxuICAgICAgICAgICAgICAgICAgICA8RW1vamlSYWRpb0dyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJTZWxlY3QgYW4gZW1vamlcIlxuICAgICAgICAgICAgICAgICAgICAgIGVtb2ppU3RhdGU9e2Vtb2ppU3RhdGV9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7RU1PSklTLm1hcCgoZW1vamkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFN2Z0NvbXBvbmVudCA9IGVtb2ppLnN2ZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxFbW9qaVJhZGlvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtlbW9qaS5jaGFyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtlbW9qaS5jaGFyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtlbW9qaS5sYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdmdDb21wb25lbnQgY3NzPXtbdHdgdy01IGgtNWBdfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Vtb2ppUmFkaW8+XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICA8L0Vtb2ppUmFkaW9Hcm91cD5cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDxzcGFuIHR3PXtcIm1sLWF1dG9cIn0+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtsb2FkaW5nfVxuICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17XCJzdWJtaXQtYnV0dG9uXCJ9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgICAgICB7Li4uY29tYmluZWRTdWJtaXRCdXR0b25Qcm9wc31cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L1BvcG92ZXJQcmltaXRpdmUuQ29udGVudD5cbiAgICAgIDwvUG9wb3ZlclByaW1pdGl2ZS5Sb290PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuRmVlZGJhY2sucHJvcFR5cGVzID0ge1xuICAvKipcbiAgIFNob3cgdGV4dCBhcmVhIHRvIGNvbGxlY3QgZmVlZGJhY2sgdGV4dFxuICAgKi9cbiAgZW5hYmxlRmVlZGJhY2tUZXh0OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICBTaG93IGVtb2ppIHNlbGVjdGlvbiBidXR0b25zXG4gICAqL1xuICBlbmFibGVFbW9qaTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgRG9uJ3QgbWFrZSB0aGUgaHR0cCByZXF1ZXN0XG4gICAqL1xuICBkcnlSdW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgIFVSTCB0byBtYWtlIHRoZSBQT1NUIHJlcXVlc3RcbiAgICovXG4gIHVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICBEb24ndCBzaG93IHRoZSBlbWFpbCBpbnB1dCBmaWVsZCBhbmQgdXNlIHRoZSBzcGVjaWZpZWQgZW1haWwgaW5zdGVhZFxuICAgKi9cbiAgZW1haWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgUHJvcHMgdG8gcGFzcyBvbiB0byB0aGUgZW1haWwgaW5wdXQgZmllbGRcbiAgICovXG4gIGVtYWlsUHJvcHM6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgUHJvcHMgdG8gcGFzcyBvbiB0byB0aGUgZmVlZGJhY2sgdGV4dCBhcmVhXG4gICAqL1xuICBmZWVkYmFja1RleHRQcm9wczogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICBQcm9wcyB0byBwYXNzIG9uIHRvIHRoZSBzdWJtaXQgYnV0dG9uXG4gICAqL1xuICBzdWJtaXRCdXR0b25Qcm9wczogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICBUaGUgcHJlZmVycmVkIHNpZGUgb2YgdGhlIGFuY2hvciB0byByZW5kZXIgYWdhaW5zdCB3aGVuIG9wZW4uXG4gICovXG4gIHNpZGU6IFByb3BUeXBlcy5vbmVPZihbXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIl0pLFxuICAvKipcbiAgIFRoZSBkaXN0YW5jZSBpbiBwaXhlbHMgZnJvbSB0aGUgYW5jaG9yLlxuICAqL1xuICBzaWRlT2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICBUaGUgcHJlZmVycmVkIGFsaWdubWVudCBhZ2FpbnN0IHRoZSBhbmNob3IuIE1heSBjaGFuZ2Ugd2hlbiBjb2xsaXNpb25zIG9jY3VyLlxuICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFtcInN0YXJ0XCIsIFwiY2VudGVyXCIsIFwiZW5kXCJdKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZlZWRiYWNrO1xuIl19 */",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};function EmojiRadioGroup(I){var g=I["children"],C=I.emojiState,I=radio$1.useRadioGroup(I,C)["radioGroupProps"];return react.jsx("div",_rollupPluginBabelHelpers.extends({},I,{css:_ref}),react.jsx(RadioContext.Provider,{value:C},g))}var _ref2="production"===process.env.NODE_ENV?{name:"1vcob1d",styles:"display:flex;justify-content:center;align-items:center"}:{name:"11e77mp-EmojiRadio",styles:"display:flex;justify-content:center;align-items:center;label:EmojiRadio;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};function EmojiRadio(I){var g=I["children"],C=React__default.default.useContext(RadioContext),A=React__default.default.useRef(null),c=radio$1.useRadio(I,C,A)["inputProps"],{isFocusVisible:b,focusProps:G}=focus.useFocusRing(),C=C.selectedValue===I.value;return react.jsx("label",{onFocus:I.onFocus,css:["transform:var(--tw-transform);display:inline-flex;background-color:rgba(0, 0, 0, 0);padding:0px;margin:0px;transition-property:all;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:100ms;border-width:1px;--tw-border-opacity:1;border-color:rgba(234, 234, 234, var(--tw-border-opacity));cursor:pointer;text-align:center;border-radius:9999px;:hover{--tw-scale-x:1.05;--tw-scale-y:1.05;transform:var(--tw-transform);--tw-bg-opacity:1;background-color:rgba(255, 255, 255, var(--tw-bg-opacity));}:active{--tw-scale-x:1.05;--tw-scale-y:1.05;transform:var(--tw-transform);--tw-bg-opacity:1;background-color:rgba(255, 255, 255, var(--tw-bg-opacity));}outline:2px solid transparent;outline-offset:2px;:focus{outline:2px solid transparent;outline-offset:2px;}",C&&{"--tw-scale-x":"1.1","--tw-scale-y":"1.1",transform:"var(--tw-transform)",borderWidth:"1px","--tw-bg-opacity":"1",backgroundColor:"rgba(255, 255, 255, var(--tw-bg-opacity))","--tw-border-opacity":"1",borderColor:"rgba(247, 185, 85, var(--tw-border-opacity))"},b&&{"--tw-ring-offset-shadow":"var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)","--tw-ring-shadow":"var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color)",boxShadow:"var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)"},"production"===process.env.NODE_ENV?"":";label:EmojiRadio;","production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */","production"===process.env.NODE_ENV?"":";label:EmojiRadio;","production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"]},react.jsx(visuallyHidden.VisuallyHidden,null,react.jsx("input",_rollupPluginBabelHelpers.extends({},c,G,{ref:A}))),react.jsx("div",null,react.jsx("span",{css:_ref2,style:{width:32,height:32,borderRadius:"50%"}},g)))}var _ref3="production"===process.env.NODE_ENV?{name:"zhlx2k",styles:"height:auto;--tw-border-opacity:1;border-color:rgba(255, 255, 255, var(--tw-border-opacity));appearance:none;border-width:0px;display:flex;line-height:1.25rem;font-size:0.875rem;border-radius:5px;--tw-shadow:0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-bg-opacity:1;background-color:rgba(255, 255, 255, var(--tw-bg-opacity));resize:none;z-index:50;--tw-text-opacity:1;color:rgba(0, 0, 0, var(--tw-text-opacity));flex-direction:column;justify-content:flex-start;position:relative;:hover{--tw-border-opacity:1;border-color:rgba(0, 0, 0, var(--tw-border-opacity));}:focus{--tw-border-opacity:1;border-color:rgba(0, 0, 0, var(--tw-border-opacity));}:active{--tw-border-opacity:1;border-color:rgba(0, 0, 0, var(--tw-border-opacity));}"}:{name:"1b6rown-Feedback",styles:"height:auto;--tw-border-opacity:1;border-color:rgba(255, 255, 255, var(--tw-border-opacity));appearance:none;border-width:0px;display:flex;line-height:1.25rem;font-size:0.875rem;border-radius:5px;--tw-shadow:0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-bg-opacity:1;background-color:rgba(255, 255, 255, var(--tw-bg-opacity));resize:none;z-index:50;--tw-text-opacity:1;color:rgba(0, 0, 0, var(--tw-text-opacity));flex-direction:column;justify-content:flex-start;position:relative;:hover{--tw-border-opacity:1;border-color:rgba(0, 0, 0, var(--tw-border-opacity));}:focus{--tw-border-opacity:1;border-color:rgba(0, 0, 0, var(--tw-border-opacity));}:active{--tw-border-opacity:1;border-color:rgba(0, 0, 0, var(--tw-border-opacity));};label:Feedback;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref4="production"===process.env.NODE_ENV?{name:"dweznn",styles:"padding:1rem;position:relative"}:{name:"1eflo63-Feedback",styles:"padding:1rem;position:relative;label:Feedback;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref5="production"===process.env.NODE_ENV?{name:"1gok8e8",styles:"margin-bottom:0.5rem"}:{name:"1xrwcof-Feedback",styles:"margin-bottom:0.5rem;label:Feedback;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref6="production"===process.env.NODE_ENV?{name:"1iasts7",styles:"display:flex;flex-direction:column;align-items:center;justify-content:center;padding:1rem;text-align:center;z-index:50"}:{name:"15k0n1c-Feedback",styles:"display:flex;flex-direction:column;align-items:center;justify-content:center;padding:1rem;text-align:center;z-index:50;label:Feedback;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref7="production"===process.env.NODE_ENV?{name:"1iasts7",styles:"display:flex;flex-direction:column;align-items:center;justify-content:center;padding:1rem;text-align:center;z-index:50"}:{name:"15k0n1c-Feedback",styles:"display:flex;flex-direction:column;align-items:center;justify-content:center;padding:1rem;text-align:center;z-index:50;label:Feedback;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref8="production"===process.env.NODE_ENV?{name:"1jscwas",styles:"width:100%;height:4rem;padding:1rem;display:flex;justify-content:flex-end;align-items:center;gap:1rem;--tw-bg-opacity:1;background-color:rgba(244, 245, 247, var(--tw-bg-opacity));border-top-width:1px;--tw-border-opacity:1;border-color:rgba(234, 234, 234, var(--tw-border-opacity));pointer-events:auto"}:{name:"13uq7j6-Feedback",styles:"width:100%;height:4rem;padding:1rem;display:flex;justify-content:flex-end;align-items:center;gap:1rem;--tw-bg-opacity:1;background-color:rgba(244, 245, 247, var(--tw-bg-opacity));border-top-width:1px;--tw-border-opacity:1;border-color:rgba(234, 234, 234, var(--tw-border-opacity));pointer-events:auto;label:Feedback;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref9="production"===process.env.NODE_ENV?{name:"1h7ldow",styles:"width:1.25rem;height:1.25rem"}:{name:"vskhbv-Feedback",styles:"width:1.25rem;height:1.25rem;label:Feedback;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref10="production"===process.env.NODE_ENV?{name:"1o3nkn",styles:"margin-left:auto"}:{name:"1avdod-Feedback",styles:"margin-left:auto;label:Feedback;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const Feedback=({url:C,email:I,enableFeedbackText:g=!0,enableEmoji:A=!0,side:c="bottom",sideOffset:b=5,align:G="start",emailProps:l,feedbackTextProps:Z,submitButtonProps:X,dryRun:i=!1,children:V,...m})=>{const[W,d]=React.useState(!1),[B,u]=React.useState(!1),[Y,x]=React.useState(!1),[t,a]=React.useState("");var R=!I;const F=I||"",[y,H]=React.useState(F),[J,N]=React.useState(""),v=radio.useRadioGroupState(m);I=React.useRef(),l={required:!0,label:"Email",autoFocus:!0,placeholder:"Your email address...",...l},Z={label:"Feedback",placeholder:"Your feedback...",required:!0,rows:3,"aria-label":"Feedback input","data-gramm-editor":!1,...Z},X={label:"Send",variant:"default",...X};const p=React.useCallback(()=>{a("")},[]),h=React.useCallback(()=>{x(!1)},[]),e=React.useCallback(()=>{u(!1),p(),h()},[p,h]),s=I=>{if(I.preventDefault(),""===J.trim())a("Your feedback can't be empty");else{d(!0);const g={url:C,note:J,email:y,emotion:v.selectedValue};Promise.resolve().then(()=>{if(!i)return fetch(C,{method:"POST",body:JSON.stringify(g)})}).then(I=>{if(I.ok)return I.json();throw new Error("Sorry, we couldn't send your feedback. Status: "+I.status)}).then(()=>{d(!1),x(!0),H(F),N("")}).catch(I=>{d(!1),a(I.message)})}},w=React.useCallback(I=>{"Escape"===I.key?e():"Enter"===I.key&&I.metaKey&&s(I)},[e,s]);React.useEffect(()=>(window.addEventListener("keydown",w),()=>{window.removeEventListener("keydown",w)}),[w]),reactUse.useClickAway(I,e);var n=Boolean(W||t);const z=I=>{!t&&!Y||I||e(),u(I)};var o=React__default.default.forwardRef((I,g)=>V?V({open:B,setOpen:z,ref:g}):react.jsx(FeedbackButton,{open:B,setOpen:z,ref:g}));return react.jsx("div",_rollupPluginBabelHelpers.extends({title:"Share any feedback about our products and services",css:["padding:0px;position:relative;display:inline-block;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;:focus{outline:2px solid transparent;outline-offset:2px;}:active{outline:2px solid transparent;outline-offset:2px;}",t&&{color:"rgba(0, 0, 0, 0)"},"production"===process.env.NODE_ENV?"":";label:Feedback;","production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */","production"===process.env.NODE_ENV?"":";label:Feedback;","production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"],"aria-expanded":B,"data-testid":"container-popover"},m),react.jsx(PopoverPrimitive__namespace.Root,{onOpenChange:e,open:B},react.jsx(PopoverPrimitive__namespace.Trigger,{asChild:!0},react.jsx(o,null)),react.jsx(PopoverPrimitive__namespace.Content,{sideOffset:b,side:c,align:G},react.jsx("form",{ref:I,css:_ref3,style:{width:"22rem"},onSubmit:s,"data-testid":"form"},!t&&!Y&&react.jsx("div",{css:_ref4},R&&react.jsx("div",{css:_ref5},react.jsx(index,_rollupPluginBabelHelpers.extends({id:"feedback-email",type:"email",disabled:n,onChange:H,value:y},l))),g&&react.jsx("div",{className:"input"},react.jsx(index$1,_rollupPluginBabelHelpers.extends({id:"feedback-text",value:J,onChange:I=>N(I),disabled:n,textareaClassName:classNames__default.default("feedback-input",{"text-brand-gray":W})},Z)))),t&&react.jsx("div",{css:_ref6},react.jsx(index$2,{is:"p",small:!0,color:"text-red-600",style:{marginBottom:"8px"}},t),react.jsx(index$3,{type:"minimal",onClick:I=>{I.preventDefault(),p()},autoFocus:!0,label:"Go back"})),Y&&react.jsx("div",{css:_ref7},react.jsx(index$2,{small:!0,is:"p"},"Your feedback has been received!"),react.jsx(index$2,{small:!0,is:"p"},"Thank you for your help.")),!Y&&!t&&react.jsx("div",{css:_ref8},A&&react.jsx("span",{className:"emojis"},react.jsx(EmojiRadioGroup,{label:"Select an emoji",emojiState:v},EMOJIS.map(I=>{var g=I.svg;return react.jsx(EmojiRadio,{key:I.char,value:I.char,label:I.label},react.jsx(g,{css:_ref9}))}))),react.jsx("span",{css:_ref10},react.jsx(index$3,_rollupPluginBabelHelpers.extends({disabled:W,"data-testid":"submit-button",type:"submit"},X))))))))};Feedback.propTypes={enableFeedbackText:PropTypes__default.default.bool,enableEmoji:PropTypes__default.default.bool,dryRun:PropTypes__default.default.bool,url:PropTypes__default.default.string,email:PropTypes__default.default.string,emailProps:PropTypes__default.default.any,feedbackTextProps:PropTypes__default.default.any,submitButtonProps:PropTypes__default.default.any,side:PropTypes__default.default.oneOf(["top","right","bottom","left"]),sideOffset:PropTypes__default.default.number,align:PropTypes__default.default.oneOf(["start","center","end"])},module.exports=Feedback;
