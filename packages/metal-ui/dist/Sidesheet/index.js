"use strict";var react=require("@emotion/react"),React=require("react"),reactDom=require("react-dom"),PropTypes=require("prop-types"),index=require("../Box/index.js"),reactUse=require("react-use");function _interopDefaultLegacy(I){return I&&"object"==typeof I&&"default"in I?I:{default:I}}var PropTypes__default=_interopDefaultLegacy(PropTypes);function _EMOTION_STRINGIFIED_CSS_ERROR__(){return"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."}var _ref="production"===process.env.NODE_ENV?{name:"10832i9",styles:"--tw-text-opacity:1;color:rgba(136, 136, 136, var(--tw-text-opacity))"}:{name:"1kob36r-XIcon",styles:"--tw-text-opacity:1;color:rgba(136, 136, 136, var(--tw-text-opacity));label:XIcon;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};function XIcon(){return react.jsx("svg",{fill:"none",css:_ref,stroke:"currentColor",viewBox:"0 0 24 24",width:"16px",height:"16px"},react.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",d:"M6 18L18 6M6 6l12 12"}))}const SidesheetContent=({id:I,children:g})=>{if("undefined"==typeof window)return null;let C=React.useRef(document.getElementById(I)||document.createElement("div"));return React.useEffect(()=>(document.getElementById(I)||(C.current.id=I,document.body.appendChild(C.current)),()=>{C.current.parentElement&&C.current.parentElement.removeChild(C.current)}),[I]),reactDom.createPortal(g,C.current)};var _ref2="production"===process.env.NODE_ENV?{name:"iasdbu",styles:"position:relative;border-bottom-width:1px;--tw-border-opacity:1;border-color:rgba(234, 234, 234, var(--tw-border-opacity));border-radius:5px;border-bottom-left-radius:0px;border-bottom-right-radius:0px"}:{name:"3d78pf-Sidesheet",styles:"position:relative;border-bottom-width:1px;--tw-border-opacity:1;border-color:rgba(234, 234, 234, var(--tw-border-opacity));border-radius:5px;border-bottom-left-radius:0px;border-bottom-right-radius:0px;label:Sidesheet;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref3="production"===process.env.NODE_ENV?{name:"15eipi2",styles:"--tw-text-opacity:1;color:rgba(0, 0, 0, var(--tw-text-opacity));flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;line-height:1.5rem"}:{name:"fy6yfu-Sidesheet",styles:"--tw-text-opacity:1;color:rgba(0, 0, 0, var(--tw-text-opacity));flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;line-height:1.5rem;label:Sidesheet;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref4="production"===process.env.NODE_ENV?{name:"1rn847i",styles:"cursor:pointer;background-color:rgba(0, 0, 0, 0)"}:{name:"1gzylcv-Sidesheet",styles:"cursor:pointer;background-color:rgba(0, 0, 0, 0);label:Sidesheet;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref5="production"===process.env.NODE_ENV?{name:"730vxe",styles:"position:relative;flex:1 1 0%;border-radius:5px;padding-left:0.75rem;padding-right:0.75rem;padding-top:0.75rem;padding-bottom:0.75rem"}:{name:"4sb571-Sidesheet",styles:"position:relative;flex:1 1 0%;border-radius:5px;padding-left:0.75rem;padding-right:0.75rem;padding-top:0.75rem;padding-bottom:0.75rem;label:Sidesheet;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref6="production"===process.env.NODE_ENV?{name:"6geypv",styles:"overflow:visible;padding-left:0.75rem;padding-right:0.75rem;padding-top:0.75rem;padding-bottom:0.75rem"}:{name:"jy7pxc-Sidesheet",styles:"overflow:visible;padding-left:0.75rem;padding-right:0.75rem;padding-top:0.75rem;padding-bottom:0.75rem;label:Sidesheet;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref7="production"===process.env.NODE_ENV?{name:"ozd7xs",styles:"flex-shrink:0"}:{name:"1dgwzgt-Sidesheet",styles:"flex-shrink:0;label:Sidesheet;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__},_ref8="production"===process.env.NODE_ENV?{name:"62jygk",styles:"height:4rem;border-top-width:1px;--tw-border-opacity:1;border-color:rgba(234, 234, 234, var(--tw-border-opacity));position:relative;flex:0 1 auto;border-radius:5px;border-top-left-radius:0px;border-top-right-radius:0px"}:{name:"uobnf-Sidesheet",styles:"height:4rem;border-top-width:1px;--tw-border-opacity:1;border-color:rgba(234, 234, 234, var(--tw-border-opacity));position:relative;flex:0 1 auto;border-radius:5px;border-top-left-radius:0px;border-top-right-radius:0px;label:Sidesheet;",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const Sidesheet=({title:I,children:g,action:C,content:A,width:c=400,onClose:b,isShown:l=!1})=>{var G=React.useRef(),Z=React.useRef();const[X,d]=React.useState(!1),[u,i]=React.useState(!1),W=(React.useEffect(()=>{let I;return I=l?(d(!0),setTimeout(()=>i(!0),100)):(i(!1),setTimeout(()=>d(!1),100)),()=>clearTimeout(I)},[l]),()=>{let I;return X&&u&&(b(),i(!1),I=setTimeout(()=>d(!1),100)),()=>clearTimeout(I)});return reactUse.useKeyPressEvent("Escape",W),react.jsx("div",{ref:G},g,X&&react.jsx(SidesheetContent,{id:"sidesheet"},react.jsx("div",{onClick:X?()=>W():null,css:["transition-property:background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:100ms;position:fixed;z-index:50;top:0px;right:0px;bottom:0px;left:0px;opacity:0.25;",u&&{"--tw-bg-opacity":"1",backgroundColor:"rgba(17, 17, 17, var(--tw-bg-opacity))"},!u&&{backgroundColor:"rgba(0, 0, 0, 0)"},"production"===process.env.NODE_ENV?"":";label:Sidesheet;","production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlHYyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IEJveCBmcm9tIFwiLi4vQm94XCI7XG5pbXBvcnQgeyB1c2VLZXlQcmVzc0V2ZW50IH0gZnJvbSBcInJlYWN0LXVzZVwiO1xuaW1wb3J0IHR3LCB7IGNzcyB9IGZyb20gXCJ0d2luLm1hY3JvXCI7XG5cblxuZnVuY3Rpb24gWEljb24oKSB7XG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdHc9XCJ0ZXh0LWFjY2VudC1mb3VyXCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHdpZHRoPVwiMTZweFwiXG4gICAgICBoZWlnaHQ9XCIxNnB4XCJcbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAgICAgZD1cIk02IDE4TDE4IDZNNiA2bDEyIDEyXCJcbiAgICAgID48L3BhdGg+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmNvbnN0IFNpZGVzaGVldENvbnRlbnQgPSAoeyBpZCwgY2hpbGRyZW4gfSkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIG51bGw7XG5cbiAgbGV0IGVsZW1lbnQgPSB1c2VSZWYoXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICBlbGVtZW50LmN1cnJlbnQuaWQgPSBpZDtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudC5jdXJyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmN1cnJlbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmN1cnJlbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtpZF0pO1xuXG4gIHJldHVybiBjcmVhdGVQb3J0YWwoY2hpbGRyZW4sIGVsZW1lbnQuY3VycmVudCk7XG59O1xuXG5jb25zdCBTaWRlc2hlZXQgPSAoe1xuICB0aXRsZSxcbiAgY2hpbGRyZW4sXG4gIGFjdGlvbixcbiAgY29udGVudCxcbiAgd2lkdGggPSA0MDAsXG4gIG9uQ2xvc2UsXG4gIGlzU2hvd24gPSBmYWxzZSxcbn0pID0+IHtcbiAgY29uc3Qgc2lkZVNoZWV0ID0gdXNlUmVmKCk7XG4gIGNvbnN0IHBvcnRhbCA9IHVzZVJlZigpO1xuICBjb25zdCBbaXNPcGVuZWQsIHNldElzT3BlbmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHRyYW5zaXRpb25UaW1lb3V0O1xuXG4gICAgaWYgKCFpc1Nob3duKSB7XG4gICAgICBzZXRUcmFuc2l0aW9uKGZhbHNlKTtcbiAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzZXRJc09wZW5lZChmYWxzZSksIDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElzT3BlbmVkKHRydWUpO1xuICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHNldFRyYW5zaXRpb24odHJ1ZSksIDEwMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0cmFuc2l0aW9uVGltZW91dCk7XG4gIH0sIFtpc1Nob3duXSk7XG5cbiAgY29uc3QgY2xvc2VUcmFuc2l0aW9uID0gKCkgPT4ge1xuICAgIGxldCB0aW1lb3V0XG4gICAgaWYgKGlzT3BlbmVkICYmIHRyYW5zaXRpb24pIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICAgIHNldFRyYW5zaXRpb24oZmFsc2UpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gc2V0SXNPcGVuZWQoZmFsc2UpLCAxMDApO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gIH07XG5cbiAgdXNlS2V5UHJlc3NFdmVudChcIkVzY2FwZVwiLCBjbG9zZVRyYW5zaXRpb24pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e3NpZGVTaGVldH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7aXNPcGVuZWQgJiYgKFxuICAgICAgICA8U2lkZXNoZWV0Q29udGVudCBpZD1cInNpZGVzaGVldFwiPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBvbkNsaWNrPXtpc09wZW5lZCA/ICAoKSA9PiBjbG9zZVRyYW5zaXRpb24oKSA6IG51bGx9XG4gICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgIHR3YGZpeGVkIHotNTAgaW5zZXQtMCBvcGFjaXR5LTI1IGR1cmF0aW9uLTEwMCB0cmFuc2l0aW9uYCxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uICYmIHR3YGJnLWFjY2VudC1laWdodGAsXG4gICAgICAgICAgICAgICAgIXRyYW5zaXRpb24gJiYgdHdgYmctdHJhbnNwYXJlbnRgLFxuICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgcmVmPXtwb3J0YWx9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiBcImNhbGMoMTAwdncgLSAyMHB4KVwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCJjYWxjKDEwMCUgLSAyMHB4KVwiLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoJHsgdHJhbnNpdGlvbiA/ICcwJyA6ICcxMDAlJyB9KVxuICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIEBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbikge1xuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJHsgdHJhbnNpdGlvbiA/ICcxJyA6ICcwJyB9XG4gICAgICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICAgICAgdHdgZml4ZWQgcmlnaHQtMCB0b3AtMCBib3R0b20tMCB6LTUwIG1pbi13LTAgYmctd2hpdGUgZHVyYXRpb24tMTAwIGgtZnVsbCBmbGV4IGZsZXgtY29sIHNoYWRvdy14bCBtLTIgcm91bmRlZCB0cmFuc2l0aW9uLXRyYW5zZm9ybSAgbW90aW9uLXJlZHVjZTp0cmFuc2l0aW9uLW9wYWNpdHlgXG4gICAgICAgICAgICAgIF19PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgIHR3PVwicmVsYXRpdmUgYm9yZGVyLWIgYm9yZGVyLWJvcmRlciByb3VuZGVkIHJvdW5kZWQtYi1ub25lXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgdHc9XCJ0ZXh0LWZvcmVncm91bmQgZmxleC1hdXRvIHRydW5jYXRlIGxlYWRpbmctNlwiPlxuICAgICAgICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cInRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgIHR3PVwiY3Vyc29yLXBvaW50ZXIgYmctdHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICAgICAgbm9QYWRkaW5nXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBjbG9zZVRyYW5zaXRpb24oKX0+XG4gICAgICAgICAgICAgICAgICAgIDxYSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2xcIlxuICAgICAgICAgICAgICAgIG92ZXJmbG93PXtcIm92ZXJmbG93LXktYXV0b1wifVxuICAgICAgICAgICAgICAgIHR3PVwicmVsYXRpdmUgZmxleC0xIHJvdW5kZWQgcHgtMyBweS0zXCJcbiAgICAgICAgICAgICAgICBub1BhZGRpbmdcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIG5vUGFkZGluZ1xuICAgICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbj1cImNvbFwiXG4gICAgICAgICAgICAgICAgICBvdmVyZmxvdz17XCJvdmVyZmxvdy15LWF1dG9cIn1cbiAgICAgICAgICAgICAgICAgIHR3PVwib3ZlcmZsb3ctdmlzaWJsZSBweC0zIHB5LTNcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgPGRpdiB0dz1cImZsZXgtc2hyaW5rLTBcIj57Y29udGVudH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIHthY3Rpb24gJiYgKFxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiZXZlbmx5XCJcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgdHc9XCJoLTE2IGJvcmRlci10IGJvcmRlci1ib3JkZXIgcmVsYXRpdmUgZmxleC1pbml0aWFsIHJvdW5kZWQgcm91bmRlZC10LW5vbmVcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgIDwvU2lkZXNoZWV0Q29udGVudD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5TaWRlc2hlZXQucHJvcFR5cGVzID0ge1xuICBjb250ZW50OiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LFxuICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBhY3Rpb246IFByb3BUeXBlcy5lbGVtZW50LFxuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgaXNTaG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZXNoZWV0O1xuIl19 */","production"===process.env.NODE_ENV?"":";label:Sidesheet;","production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlHYyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IEJveCBmcm9tIFwiLi4vQm94XCI7XG5pbXBvcnQgeyB1c2VLZXlQcmVzc0V2ZW50IH0gZnJvbSBcInJlYWN0LXVzZVwiO1xuaW1wb3J0IHR3LCB7IGNzcyB9IGZyb20gXCJ0d2luLm1hY3JvXCI7XG5cblxuZnVuY3Rpb24gWEljb24oKSB7XG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdHc9XCJ0ZXh0LWFjY2VudC1mb3VyXCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHdpZHRoPVwiMTZweFwiXG4gICAgICBoZWlnaHQ9XCIxNnB4XCJcbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAgICAgZD1cIk02IDE4TDE4IDZNNiA2bDEyIDEyXCJcbiAgICAgID48L3BhdGg+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmNvbnN0IFNpZGVzaGVldENvbnRlbnQgPSAoeyBpZCwgY2hpbGRyZW4gfSkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIG51bGw7XG5cbiAgbGV0IGVsZW1lbnQgPSB1c2VSZWYoXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICBlbGVtZW50LmN1cnJlbnQuaWQgPSBpZDtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudC5jdXJyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmN1cnJlbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmN1cnJlbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtpZF0pO1xuXG4gIHJldHVybiBjcmVhdGVQb3J0YWwoY2hpbGRyZW4sIGVsZW1lbnQuY3VycmVudCk7XG59O1xuXG5jb25zdCBTaWRlc2hlZXQgPSAoe1xuICB0aXRsZSxcbiAgY2hpbGRyZW4sXG4gIGFjdGlvbixcbiAgY29udGVudCxcbiAgd2lkdGggPSA0MDAsXG4gIG9uQ2xvc2UsXG4gIGlzU2hvd24gPSBmYWxzZSxcbn0pID0+IHtcbiAgY29uc3Qgc2lkZVNoZWV0ID0gdXNlUmVmKCk7XG4gIGNvbnN0IHBvcnRhbCA9IHVzZVJlZigpO1xuICBjb25zdCBbaXNPcGVuZWQsIHNldElzT3BlbmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHRyYW5zaXRpb25UaW1lb3V0O1xuXG4gICAgaWYgKCFpc1Nob3duKSB7XG4gICAgICBzZXRUcmFuc2l0aW9uKGZhbHNlKTtcbiAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzZXRJc09wZW5lZChmYWxzZSksIDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElzT3BlbmVkKHRydWUpO1xuICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHNldFRyYW5zaXRpb24odHJ1ZSksIDEwMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0cmFuc2l0aW9uVGltZW91dCk7XG4gIH0sIFtpc1Nob3duXSk7XG5cbiAgY29uc3QgY2xvc2VUcmFuc2l0aW9uID0gKCkgPT4ge1xuICAgIGxldCB0aW1lb3V0XG4gICAgaWYgKGlzT3BlbmVkICYmIHRyYW5zaXRpb24pIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICAgIHNldFRyYW5zaXRpb24oZmFsc2UpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gc2V0SXNPcGVuZWQoZmFsc2UpLCAxMDApO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gIH07XG5cbiAgdXNlS2V5UHJlc3NFdmVudChcIkVzY2FwZVwiLCBjbG9zZVRyYW5zaXRpb24pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e3NpZGVTaGVldH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7aXNPcGVuZWQgJiYgKFxuICAgICAgICA8U2lkZXNoZWV0Q29udGVudCBpZD1cInNpZGVzaGVldFwiPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBvbkNsaWNrPXtpc09wZW5lZCA/ICAoKSA9PiBjbG9zZVRyYW5zaXRpb24oKSA6IG51bGx9XG4gICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgIHR3YGZpeGVkIHotNTAgaW5zZXQtMCBvcGFjaXR5LTI1IGR1cmF0aW9uLTEwMCB0cmFuc2l0aW9uYCxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uICYmIHR3YGJnLWFjY2VudC1laWdodGAsXG4gICAgICAgICAgICAgICAgIXRyYW5zaXRpb24gJiYgdHdgYmctdHJhbnNwYXJlbnRgLFxuICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgcmVmPXtwb3J0YWx9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiBcImNhbGMoMTAwdncgLSAyMHB4KVwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCJjYWxjKDEwMCUgLSAyMHB4KVwiLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoJHsgdHJhbnNpdGlvbiA/ICcwJyA6ICcxMDAlJyB9KVxuICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIEBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbikge1xuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJHsgdHJhbnNpdGlvbiA/ICcxJyA6ICcwJyB9XG4gICAgICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICAgICAgdHdgZml4ZWQgcmlnaHQtMCB0b3AtMCBib3R0b20tMCB6LTUwIG1pbi13LTAgYmctd2hpdGUgZHVyYXRpb24tMTAwIGgtZnVsbCBmbGV4IGZsZXgtY29sIHNoYWRvdy14bCBtLTIgcm91bmRlZCB0cmFuc2l0aW9uLXRyYW5zZm9ybSAgbW90aW9uLXJlZHVjZTp0cmFuc2l0aW9uLW9wYWNpdHlgXG4gICAgICAgICAgICAgIF19PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgIHR3PVwicmVsYXRpdmUgYm9yZGVyLWIgYm9yZGVyLWJvcmRlciByb3VuZGVkIHJvdW5kZWQtYi1ub25lXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgdHc9XCJ0ZXh0LWZvcmVncm91bmQgZmxleC1hdXRvIHRydW5jYXRlIGxlYWRpbmctNlwiPlxuICAgICAgICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cInRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgIHR3PVwiY3Vyc29yLXBvaW50ZXIgYmctdHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICAgICAgbm9QYWRkaW5nXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBjbG9zZVRyYW5zaXRpb24oKX0+XG4gICAgICAgICAgICAgICAgICAgIDxYSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2xcIlxuICAgICAgICAgICAgICAgIG92ZXJmbG93PXtcIm92ZXJmbG93LXktYXV0b1wifVxuICAgICAgICAgICAgICAgIHR3PVwicmVsYXRpdmUgZmxleC0xIHJvdW5kZWQgcHgtMyBweS0zXCJcbiAgICAgICAgICAgICAgICBub1BhZGRpbmdcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIG5vUGFkZGluZ1xuICAgICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbj1cImNvbFwiXG4gICAgICAgICAgICAgICAgICBvdmVyZmxvdz17XCJvdmVyZmxvdy15LWF1dG9cIn1cbiAgICAgICAgICAgICAgICAgIHR3PVwib3ZlcmZsb3ctdmlzaWJsZSBweC0zIHB5LTNcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgPGRpdiB0dz1cImZsZXgtc2hyaW5rLTBcIj57Y29udGVudH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIHthY3Rpb24gJiYgKFxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiZXZlbmx5XCJcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgdHc9XCJoLTE2IGJvcmRlci10IGJvcmRlci1ib3JkZXIgcmVsYXRpdmUgZmxleC1pbml0aWFsIHJvdW5kZWQgcm91bmRlZC10LW5vbmVcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgIDwvU2lkZXNoZWV0Q29udGVudD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5TaWRlc2hlZXQucHJvcFR5cGVzID0ge1xuICBjb250ZW50OiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LFxuICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBhY3Rpb246IFByb3BUeXBlcy5lbGVtZW50LFxuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgaXNTaG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZXNoZWV0O1xuIl19 */"]}),react.jsx("div",{ref:Z,style:{width:c,maxWidth:"calc(100vw - 20px)",height:"calc(100% - 20px)"},css:[react.css("transform:translateX(",u?"0":"100%",");"+("production"===process.env.NODE_ENV?"":";label:Sidesheet;"),"production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStHbUIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBCb3ggZnJvbSBcIi4uL0JveFwiO1xuaW1wb3J0IHsgdXNlS2V5UHJlc3NFdmVudCB9IGZyb20gXCJyZWFjdC11c2VcIjtcbmltcG9ydCB0dywgeyBjc3MgfSBmcm9tIFwidHdpbi5tYWNyb1wiO1xuXG5cbmZ1bmN0aW9uIFhJY29uKCkge1xuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHR3PVwidGV4dC1hY2NlbnQtZm91clwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICB3aWR0aD1cIjE2cHhcIlxuICAgICAgaGVpZ2h0PVwiMTZweFwiXG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgICAgIGQ9XCJNNiAxOEwxOCA2TTYgNmwxMiAxMlwiXG4gICAgICA+PC9wYXRoPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5jb25zdCBTaWRlc2hlZXRDb250ZW50ID0gKHsgaWQsIGNoaWxkcmVuIH0pID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBudWxsO1xuXG4gIGxldCBlbGVtZW50ID0gdXNlUmVmKFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSkge1xuICAgICAgZWxlbWVudC5jdXJyZW50LmlkID0gaWQ7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQuY3VycmVudCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5jdXJyZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5jdXJyZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbaWRdKTtcblxuICByZXR1cm4gY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBlbGVtZW50LmN1cnJlbnQpO1xufTtcblxuY29uc3QgU2lkZXNoZWV0ID0gKHtcbiAgdGl0bGUsXG4gIGNoaWxkcmVuLFxuICBhY3Rpb24sXG4gIGNvbnRlbnQsXG4gIHdpZHRoID0gNDAwLFxuICBvbkNsb3NlLFxuICBpc1Nob3duID0gZmFsc2UsXG59KSA9PiB7XG4gIGNvbnN0IHNpZGVTaGVldCA9IHVzZVJlZigpO1xuICBjb25zdCBwb3J0YWwgPSB1c2VSZWYoKTtcbiAgY29uc3QgW2lzT3BlbmVkLCBzZXRJc09wZW5lZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFt0cmFuc2l0aW9uLCBzZXRUcmFuc2l0aW9uXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCB0cmFuc2l0aW9uVGltZW91dDtcblxuICAgIGlmICghaXNTaG93bikge1xuICAgICAgc2V0VHJhbnNpdGlvbihmYWxzZSk7XG4gICAgICB0cmFuc2l0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gc2V0SXNPcGVuZWQoZmFsc2UpLCAxMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJc09wZW5lZCh0cnVlKTtcbiAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzZXRUcmFuc2l0aW9uKHRydWUpLCAxMDApO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodHJhbnNpdGlvblRpbWVvdXQpO1xuICB9LCBbaXNTaG93bl0pO1xuXG4gIGNvbnN0IGNsb3NlVHJhbnNpdGlvbiA9ICgpID0+IHtcbiAgICBsZXQgdGltZW91dFxuICAgIGlmIChpc09wZW5lZCAmJiB0cmFuc2l0aW9uKSB7XG4gICAgICBvbkNsb3NlKCk7XG4gICAgICBzZXRUcmFuc2l0aW9uKGZhbHNlKTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHNldElzT3BlbmVkKGZhbHNlKSwgMTAwKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0KVxuICB9O1xuXG4gIHVzZUtleVByZXNzRXZlbnQoXCJFc2NhcGVcIiwgY2xvc2VUcmFuc2l0aW9uKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtzaWRlU2hlZXR9PlxuICAgICAge2NoaWxkcmVufVxuICAgICAge2lzT3BlbmVkICYmIChcbiAgICAgICAgPFNpZGVzaGVldENvbnRlbnQgaWQ9XCJzaWRlc2hlZXRcIj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgb25DbGljaz17aXNPcGVuZWQgPyAgKCkgPT4gY2xvc2VUcmFuc2l0aW9uKCkgOiBudWxsfVxuICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICB0d2BmaXhlZCB6LTUwIGluc2V0LTAgb3BhY2l0eS0yNSBkdXJhdGlvbi0xMDAgdHJhbnNpdGlvbmAsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbiAmJiB0d2BiZy1hY2NlbnQtZWlnaHRgLFxuICAgICAgICAgICAgICAgICF0cmFuc2l0aW9uICYmIHR3YGJnLXRyYW5zcGFyZW50YCxcbiAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIHJlZj17cG9ydGFsfVxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogXCJjYWxjKDEwMHZ3IC0gMjBweClcIixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiY2FsYygxMDAlIC0gMjBweClcIixcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR7IHRyYW5zaXRpb24gPyAnMCcgOiAnMTAwJScgfSlcbiAgICAgICAgICAgICAgICBgLFxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBAbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICR7IHRyYW5zaXRpb24gPyAnMScgOiAnMCcgfVxuICAgICAgICAgICAgICAgIH1gLFxuICAgICAgICAgICAgICAgIHR3YGZpeGVkIHJpZ2h0LTAgdG9wLTAgYm90dG9tLTAgei01MCBtaW4tdy0wIGJnLXdoaXRlIGR1cmF0aW9uLTEwMCBoLWZ1bGwgZmxleCBmbGV4LWNvbCBzaGFkb3cteGwgbS0yIHJvdW5kZWQgdHJhbnNpdGlvbi10cmFuc2Zvcm0gIG1vdGlvbi1yZWR1Y2U6dHJhbnNpdGlvbi1vcGFjaXR5YFxuICAgICAgICAgICAgICBdfT5cbiAgICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICB0dz1cInJlbGF0aXZlIGJvcmRlci1iIGJvcmRlci1ib3JkZXIgcm91bmRlZCByb3VuZGVkLWItbm9uZVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IHR3PVwidGV4dC1mb3JlZ3JvdW5kIGZsZXgtYXV0byB0cnVuY2F0ZSBsZWFkaW5nLTZcIj5cbiAgICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgICBmbGV4XG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJ0cmFuc3BhcmVudFwiXG4gICAgICAgICAgICAgICAgICB0dz1cImN1cnNvci1wb2ludGVyIGJnLXRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgIG5vUGFkZGluZ1xuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gY2xvc2VUcmFuc2l0aW9uKCl9PlxuICAgICAgICAgICAgICAgICAgICA8WEljb24gLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uPVwiY29sXCJcbiAgICAgICAgICAgICAgICBvdmVyZmxvdz17XCJvdmVyZmxvdy15LWF1dG9cIn1cbiAgICAgICAgICAgICAgICB0dz1cInJlbGF0aXZlIGZsZXgtMSByb3VuZGVkIHB4LTMgcHktM1wiXG4gICAgICAgICAgICAgICAgbm9QYWRkaW5nXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgICBub1BhZGRpbmdcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2xcIlxuICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c9e1wib3ZlcmZsb3cteS1hdXRvXCJ9XG4gICAgICAgICAgICAgICAgICB0dz1cIm92ZXJmbG93LXZpc2libGUgcHgtMyBweS0zXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgIDxkaXYgdHc9XCJmbGV4LXNocmluay0wXCI+e2NvbnRlbnR9PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICB7YWN0aW9uICYmIChcbiAgICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgICBmbGV4XG4gICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudD1cImV2ZW5seVwiXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgIHR3PVwiaC0xNiBib3JkZXItdCBib3JkZXItYm9yZGVyIHJlbGF0aXZlIGZsZXgtaW5pdGlhbCByb3VuZGVkIHJvdW5kZWQtdC1ub25lXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7YWN0aW9ufVxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICA8L1NpZGVzaGVldENvbnRlbnQ+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuU2lkZXNoZWV0LnByb3BUeXBlcyA9IHtcbiAgY29udGVudDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgYWN0aW9uOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGlzU2hvd246IFByb3BUeXBlcy5ib29sLFxuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpZGVzaGVldDtcbiJdfQ== */","production"===process.env.NODE_ENV?"":";label:Sidesheet;"),react.css("@media (prefers-reduced-motion){transform:none;opacity:",u?"1":"0",";}"+("production"===process.env.NODE_ENV?"":";label:Sidesheet;"),"production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtIbUIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBCb3ggZnJvbSBcIi4uL0JveFwiO1xuaW1wb3J0IHsgdXNlS2V5UHJlc3NFdmVudCB9IGZyb20gXCJyZWFjdC11c2VcIjtcbmltcG9ydCB0dywgeyBjc3MgfSBmcm9tIFwidHdpbi5tYWNyb1wiO1xuXG5cbmZ1bmN0aW9uIFhJY29uKCkge1xuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHR3PVwidGV4dC1hY2NlbnQtZm91clwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICB3aWR0aD1cIjE2cHhcIlxuICAgICAgaGVpZ2h0PVwiMTZweFwiXG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgICAgIGQ9XCJNNiAxOEwxOCA2TTYgNmwxMiAxMlwiXG4gICAgICA+PC9wYXRoPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5jb25zdCBTaWRlc2hlZXRDb250ZW50ID0gKHsgaWQsIGNoaWxkcmVuIH0pID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBudWxsO1xuXG4gIGxldCBlbGVtZW50ID0gdXNlUmVmKFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSkge1xuICAgICAgZWxlbWVudC5jdXJyZW50LmlkID0gaWQ7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQuY3VycmVudCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5jdXJyZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5jdXJyZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbaWRdKTtcblxuICByZXR1cm4gY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBlbGVtZW50LmN1cnJlbnQpO1xufTtcblxuY29uc3QgU2lkZXNoZWV0ID0gKHtcbiAgdGl0bGUsXG4gIGNoaWxkcmVuLFxuICBhY3Rpb24sXG4gIGNvbnRlbnQsXG4gIHdpZHRoID0gNDAwLFxuICBvbkNsb3NlLFxuICBpc1Nob3duID0gZmFsc2UsXG59KSA9PiB7XG4gIGNvbnN0IHNpZGVTaGVldCA9IHVzZVJlZigpO1xuICBjb25zdCBwb3J0YWwgPSB1c2VSZWYoKTtcbiAgY29uc3QgW2lzT3BlbmVkLCBzZXRJc09wZW5lZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFt0cmFuc2l0aW9uLCBzZXRUcmFuc2l0aW9uXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCB0cmFuc2l0aW9uVGltZW91dDtcblxuICAgIGlmICghaXNTaG93bikge1xuICAgICAgc2V0VHJhbnNpdGlvbihmYWxzZSk7XG4gICAgICB0cmFuc2l0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gc2V0SXNPcGVuZWQoZmFsc2UpLCAxMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJc09wZW5lZCh0cnVlKTtcbiAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzZXRUcmFuc2l0aW9uKHRydWUpLCAxMDApO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodHJhbnNpdGlvblRpbWVvdXQpO1xuICB9LCBbaXNTaG93bl0pO1xuXG4gIGNvbnN0IGNsb3NlVHJhbnNpdGlvbiA9ICgpID0+IHtcbiAgICBsZXQgdGltZW91dFxuICAgIGlmIChpc09wZW5lZCAmJiB0cmFuc2l0aW9uKSB7XG4gICAgICBvbkNsb3NlKCk7XG4gICAgICBzZXRUcmFuc2l0aW9uKGZhbHNlKTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHNldElzT3BlbmVkKGZhbHNlKSwgMTAwKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0KVxuICB9O1xuXG4gIHVzZUtleVByZXNzRXZlbnQoXCJFc2NhcGVcIiwgY2xvc2VUcmFuc2l0aW9uKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtzaWRlU2hlZXR9PlxuICAgICAge2NoaWxkcmVufVxuICAgICAge2lzT3BlbmVkICYmIChcbiAgICAgICAgPFNpZGVzaGVldENvbnRlbnQgaWQ9XCJzaWRlc2hlZXRcIj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgb25DbGljaz17aXNPcGVuZWQgPyAgKCkgPT4gY2xvc2VUcmFuc2l0aW9uKCkgOiBudWxsfVxuICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICB0d2BmaXhlZCB6LTUwIGluc2V0LTAgb3BhY2l0eS0yNSBkdXJhdGlvbi0xMDAgdHJhbnNpdGlvbmAsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbiAmJiB0d2BiZy1hY2NlbnQtZWlnaHRgLFxuICAgICAgICAgICAgICAgICF0cmFuc2l0aW9uICYmIHR3YGJnLXRyYW5zcGFyZW50YCxcbiAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIHJlZj17cG9ydGFsfVxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogXCJjYWxjKDEwMHZ3IC0gMjBweClcIixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiY2FsYygxMDAlIC0gMjBweClcIixcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR7IHRyYW5zaXRpb24gPyAnMCcgOiAnMTAwJScgfSlcbiAgICAgICAgICAgICAgICBgLFxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBAbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICR7IHRyYW5zaXRpb24gPyAnMScgOiAnMCcgfVxuICAgICAgICAgICAgICAgIH1gLFxuICAgICAgICAgICAgICAgIHR3YGZpeGVkIHJpZ2h0LTAgdG9wLTAgYm90dG9tLTAgei01MCBtaW4tdy0wIGJnLXdoaXRlIGR1cmF0aW9uLTEwMCBoLWZ1bGwgZmxleCBmbGV4LWNvbCBzaGFkb3cteGwgbS0yIHJvdW5kZWQgdHJhbnNpdGlvbi10cmFuc2Zvcm0gIG1vdGlvbi1yZWR1Y2U6dHJhbnNpdGlvbi1vcGFjaXR5YFxuICAgICAgICAgICAgICBdfT5cbiAgICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICB0dz1cInJlbGF0aXZlIGJvcmRlci1iIGJvcmRlci1ib3JkZXIgcm91bmRlZCByb3VuZGVkLWItbm9uZVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IHR3PVwidGV4dC1mb3JlZ3JvdW5kIGZsZXgtYXV0byB0cnVuY2F0ZSBsZWFkaW5nLTZcIj5cbiAgICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgICBmbGV4XG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJ0cmFuc3BhcmVudFwiXG4gICAgICAgICAgICAgICAgICB0dz1cImN1cnNvci1wb2ludGVyIGJnLXRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgIG5vUGFkZGluZ1xuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gY2xvc2VUcmFuc2l0aW9uKCl9PlxuICAgICAgICAgICAgICAgICAgICA8WEljb24gLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uPVwiY29sXCJcbiAgICAgICAgICAgICAgICBvdmVyZmxvdz17XCJvdmVyZmxvdy15LWF1dG9cIn1cbiAgICAgICAgICAgICAgICB0dz1cInJlbGF0aXZlIGZsZXgtMSByb3VuZGVkIHB4LTMgcHktM1wiXG4gICAgICAgICAgICAgICAgbm9QYWRkaW5nXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgICBub1BhZGRpbmdcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2xcIlxuICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c9e1wib3ZlcmZsb3cteS1hdXRvXCJ9XG4gICAgICAgICAgICAgICAgICB0dz1cIm92ZXJmbG93LXZpc2libGUgcHgtMyBweS0zXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgIDxkaXYgdHc9XCJmbGV4LXNocmluay0wXCI+e2NvbnRlbnR9PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICB7YWN0aW9uICYmIChcbiAgICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgICBmbGV4XG4gICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudD1cImV2ZW5seVwiXG4gICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgIHR3PVwiaC0xNiBib3JkZXItdCBib3JkZXItYm9yZGVyIHJlbGF0aXZlIGZsZXgtaW5pdGlhbCByb3VuZGVkIHJvdW5kZWQtdC1ub25lXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7YWN0aW9ufVxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICA8L1NpZGVzaGVldENvbnRlbnQ+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuU2lkZXNoZWV0LnByb3BUeXBlcyA9IHtcbiAgY29udGVudDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgYWN0aW9uOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGlzU2hvd246IFByb3BUeXBlcy5ib29sLFxuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpZGVzaGVldDtcbiJdfQ== */","production"===process.env.NODE_ENV?"":";label:Sidesheet;"),"position:fixed;right:0px;top:0px;bottom:0px;z-index:50;min-width:0px;--tw-bg-opacity:1;background-color:rgba(255, 255, 255, var(--tw-bg-opacity));transition-duration:150ms;height:100%;display:flex;flex-direction:column;--tw-shadow:0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);margin:0.5rem;border-radius:5px;transition-property:transform;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);@media (prefers-reduced-motion: reduce){transition-property:opacity;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms;}"+("production"===process.env.NODE_ENV?"":";label:Sidesheet;"),"production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThHYyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IEJveCBmcm9tIFwiLi4vQm94XCI7XG5pbXBvcnQgeyB1c2VLZXlQcmVzc0V2ZW50IH0gZnJvbSBcInJlYWN0LXVzZVwiO1xuaW1wb3J0IHR3LCB7IGNzcyB9IGZyb20gXCJ0d2luLm1hY3JvXCI7XG5cblxuZnVuY3Rpb24gWEljb24oKSB7XG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdHc9XCJ0ZXh0LWFjY2VudC1mb3VyXCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHdpZHRoPVwiMTZweFwiXG4gICAgICBoZWlnaHQ9XCIxNnB4XCJcbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAgICAgZD1cIk02IDE4TDE4IDZNNiA2bDEyIDEyXCJcbiAgICAgID48L3BhdGg+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmNvbnN0IFNpZGVzaGVldENvbnRlbnQgPSAoeyBpZCwgY2hpbGRyZW4gfSkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIG51bGw7XG5cbiAgbGV0IGVsZW1lbnQgPSB1c2VSZWYoXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICBlbGVtZW50LmN1cnJlbnQuaWQgPSBpZDtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudC5jdXJyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmN1cnJlbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmN1cnJlbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtpZF0pO1xuXG4gIHJldHVybiBjcmVhdGVQb3J0YWwoY2hpbGRyZW4sIGVsZW1lbnQuY3VycmVudCk7XG59O1xuXG5jb25zdCBTaWRlc2hlZXQgPSAoe1xuICB0aXRsZSxcbiAgY2hpbGRyZW4sXG4gIGFjdGlvbixcbiAgY29udGVudCxcbiAgd2lkdGggPSA0MDAsXG4gIG9uQ2xvc2UsXG4gIGlzU2hvd24gPSBmYWxzZSxcbn0pID0+IHtcbiAgY29uc3Qgc2lkZVNoZWV0ID0gdXNlUmVmKCk7XG4gIGNvbnN0IHBvcnRhbCA9IHVzZVJlZigpO1xuICBjb25zdCBbaXNPcGVuZWQsIHNldElzT3BlbmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHRyYW5zaXRpb25UaW1lb3V0O1xuXG4gICAgaWYgKCFpc1Nob3duKSB7XG4gICAgICBzZXRUcmFuc2l0aW9uKGZhbHNlKTtcbiAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzZXRJc09wZW5lZChmYWxzZSksIDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElzT3BlbmVkKHRydWUpO1xuICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHNldFRyYW5zaXRpb24odHJ1ZSksIDEwMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0cmFuc2l0aW9uVGltZW91dCk7XG4gIH0sIFtpc1Nob3duXSk7XG5cbiAgY29uc3QgY2xvc2VUcmFuc2l0aW9uID0gKCkgPT4ge1xuICAgIGxldCB0aW1lb3V0XG4gICAgaWYgKGlzT3BlbmVkICYmIHRyYW5zaXRpb24pIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICAgIHNldFRyYW5zaXRpb24oZmFsc2UpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gc2V0SXNPcGVuZWQoZmFsc2UpLCAxMDApO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gIH07XG5cbiAgdXNlS2V5UHJlc3NFdmVudChcIkVzY2FwZVwiLCBjbG9zZVRyYW5zaXRpb24pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e3NpZGVTaGVldH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7aXNPcGVuZWQgJiYgKFxuICAgICAgICA8U2lkZXNoZWV0Q29udGVudCBpZD1cInNpZGVzaGVldFwiPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBvbkNsaWNrPXtpc09wZW5lZCA/ICAoKSA9PiBjbG9zZVRyYW5zaXRpb24oKSA6IG51bGx9XG4gICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgIHR3YGZpeGVkIHotNTAgaW5zZXQtMCBvcGFjaXR5LTI1IGR1cmF0aW9uLTEwMCB0cmFuc2l0aW9uYCxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uICYmIHR3YGJnLWFjY2VudC1laWdodGAsXG4gICAgICAgICAgICAgICAgIXRyYW5zaXRpb24gJiYgdHdgYmctdHJhbnNwYXJlbnRgLFxuICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgcmVmPXtwb3J0YWx9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiBcImNhbGMoMTAwdncgLSAyMHB4KVwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCJjYWxjKDEwMCUgLSAyMHB4KVwiLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoJHsgdHJhbnNpdGlvbiA/ICcwJyA6ICcxMDAlJyB9KVxuICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIEBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbikge1xuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJHsgdHJhbnNpdGlvbiA/ICcxJyA6ICcwJyB9XG4gICAgICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICAgICAgdHdgZml4ZWQgcmlnaHQtMCB0b3AtMCBib3R0b20tMCB6LTUwIG1pbi13LTAgYmctd2hpdGUgZHVyYXRpb24tMTAwIGgtZnVsbCBmbGV4IGZsZXgtY29sIHNoYWRvdy14bCBtLTIgcm91bmRlZCB0cmFuc2l0aW9uLXRyYW5zZm9ybSAgbW90aW9uLXJlZHVjZTp0cmFuc2l0aW9uLW9wYWNpdHlgXG4gICAgICAgICAgICAgIF19PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgIHR3PVwicmVsYXRpdmUgYm9yZGVyLWIgYm9yZGVyLWJvcmRlciByb3VuZGVkIHJvdW5kZWQtYi1ub25lXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgdHc9XCJ0ZXh0LWZvcmVncm91bmQgZmxleC1hdXRvIHRydW5jYXRlIGxlYWRpbmctNlwiPlxuICAgICAgICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cInRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgIHR3PVwiY3Vyc29yLXBvaW50ZXIgYmctdHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICAgICAgbm9QYWRkaW5nXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBjbG9zZVRyYW5zaXRpb24oKX0+XG4gICAgICAgICAgICAgICAgICAgIDxYSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2xcIlxuICAgICAgICAgICAgICAgIG92ZXJmbG93PXtcIm92ZXJmbG93LXktYXV0b1wifVxuICAgICAgICAgICAgICAgIHR3PVwicmVsYXRpdmUgZmxleC0xIHJvdW5kZWQgcHgtMyBweS0zXCJcbiAgICAgICAgICAgICAgICBub1BhZGRpbmdcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIG5vUGFkZGluZ1xuICAgICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbj1cImNvbFwiXG4gICAgICAgICAgICAgICAgICBvdmVyZmxvdz17XCJvdmVyZmxvdy15LWF1dG9cIn1cbiAgICAgICAgICAgICAgICAgIHR3PVwib3ZlcmZsb3ctdmlzaWJsZSBweC0zIHB5LTNcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgPGRpdiB0dz1cImZsZXgtc2hyaW5rLTBcIj57Y29udGVudH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIHthY3Rpb24gJiYgKFxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiZXZlbmx5XCJcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgdHc9XCJoLTE2IGJvcmRlci10IGJvcmRlci1ib3JkZXIgcmVsYXRpdmUgZmxleC1pbml0aWFsIHJvdW5kZWQgcm91bmRlZC10LW5vbmVcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgIDwvU2lkZXNoZWV0Q29udGVudD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5TaWRlc2hlZXQucHJvcFR5cGVzID0ge1xuICBjb250ZW50OiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LFxuICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBhY3Rpb246IFByb3BUeXBlcy5lbGVtZW50LFxuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgaXNTaG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZXNoZWV0O1xuIl19 */","production"===process.env.NODE_ENV?"":";label:Sidesheet;","production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThHYyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IEJveCBmcm9tIFwiLi4vQm94XCI7XG5pbXBvcnQgeyB1c2VLZXlQcmVzc0V2ZW50IH0gZnJvbSBcInJlYWN0LXVzZVwiO1xuaW1wb3J0IHR3LCB7IGNzcyB9IGZyb20gXCJ0d2luLm1hY3JvXCI7XG5cblxuZnVuY3Rpb24gWEljb24oKSB7XG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdHc9XCJ0ZXh0LWFjY2VudC1mb3VyXCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHdpZHRoPVwiMTZweFwiXG4gICAgICBoZWlnaHQ9XCIxNnB4XCJcbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAgICAgZD1cIk02IDE4TDE4IDZNNiA2bDEyIDEyXCJcbiAgICAgID48L3BhdGg+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmNvbnN0IFNpZGVzaGVldENvbnRlbnQgPSAoeyBpZCwgY2hpbGRyZW4gfSkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIG51bGw7XG5cbiAgbGV0IGVsZW1lbnQgPSB1c2VSZWYoXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICBlbGVtZW50LmN1cnJlbnQuaWQgPSBpZDtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudC5jdXJyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmN1cnJlbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmN1cnJlbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtpZF0pO1xuXG4gIHJldHVybiBjcmVhdGVQb3J0YWwoY2hpbGRyZW4sIGVsZW1lbnQuY3VycmVudCk7XG59O1xuXG5jb25zdCBTaWRlc2hlZXQgPSAoe1xuICB0aXRsZSxcbiAgY2hpbGRyZW4sXG4gIGFjdGlvbixcbiAgY29udGVudCxcbiAgd2lkdGggPSA0MDAsXG4gIG9uQ2xvc2UsXG4gIGlzU2hvd24gPSBmYWxzZSxcbn0pID0+IHtcbiAgY29uc3Qgc2lkZVNoZWV0ID0gdXNlUmVmKCk7XG4gIGNvbnN0IHBvcnRhbCA9IHVzZVJlZigpO1xuICBjb25zdCBbaXNPcGVuZWQsIHNldElzT3BlbmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHRyYW5zaXRpb25UaW1lb3V0O1xuXG4gICAgaWYgKCFpc1Nob3duKSB7XG4gICAgICBzZXRUcmFuc2l0aW9uKGZhbHNlKTtcbiAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzZXRJc09wZW5lZChmYWxzZSksIDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElzT3BlbmVkKHRydWUpO1xuICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHNldFRyYW5zaXRpb24odHJ1ZSksIDEwMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0cmFuc2l0aW9uVGltZW91dCk7XG4gIH0sIFtpc1Nob3duXSk7XG5cbiAgY29uc3QgY2xvc2VUcmFuc2l0aW9uID0gKCkgPT4ge1xuICAgIGxldCB0aW1lb3V0XG4gICAgaWYgKGlzT3BlbmVkICYmIHRyYW5zaXRpb24pIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICAgIHNldFRyYW5zaXRpb24oZmFsc2UpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gc2V0SXNPcGVuZWQoZmFsc2UpLCAxMDApO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gIH07XG5cbiAgdXNlS2V5UHJlc3NFdmVudChcIkVzY2FwZVwiLCBjbG9zZVRyYW5zaXRpb24pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e3NpZGVTaGVldH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7aXNPcGVuZWQgJiYgKFxuICAgICAgICA8U2lkZXNoZWV0Q29udGVudCBpZD1cInNpZGVzaGVldFwiPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBvbkNsaWNrPXtpc09wZW5lZCA/ICAoKSA9PiBjbG9zZVRyYW5zaXRpb24oKSA6IG51bGx9XG4gICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgIHR3YGZpeGVkIHotNTAgaW5zZXQtMCBvcGFjaXR5LTI1IGR1cmF0aW9uLTEwMCB0cmFuc2l0aW9uYCxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uICYmIHR3YGJnLWFjY2VudC1laWdodGAsXG4gICAgICAgICAgICAgICAgIXRyYW5zaXRpb24gJiYgdHdgYmctdHJhbnNwYXJlbnRgLFxuICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgcmVmPXtwb3J0YWx9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiBcImNhbGMoMTAwdncgLSAyMHB4KVwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCJjYWxjKDEwMCUgLSAyMHB4KVwiLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoJHsgdHJhbnNpdGlvbiA/ICcwJyA6ICcxMDAlJyB9KVxuICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIEBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbikge1xuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJHsgdHJhbnNpdGlvbiA/ICcxJyA6ICcwJyB9XG4gICAgICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICAgICAgdHdgZml4ZWQgcmlnaHQtMCB0b3AtMCBib3R0b20tMCB6LTUwIG1pbi13LTAgYmctd2hpdGUgZHVyYXRpb24tMTAwIGgtZnVsbCBmbGV4IGZsZXgtY29sIHNoYWRvdy14bCBtLTIgcm91bmRlZCB0cmFuc2l0aW9uLXRyYW5zZm9ybSAgbW90aW9uLXJlZHVjZTp0cmFuc2l0aW9uLW9wYWNpdHlgXG4gICAgICAgICAgICAgIF19PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgIHR3PVwicmVsYXRpdmUgYm9yZGVyLWIgYm9yZGVyLWJvcmRlciByb3VuZGVkIHJvdW5kZWQtYi1ub25lXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgdHc9XCJ0ZXh0LWZvcmVncm91bmQgZmxleC1hdXRvIHRydW5jYXRlIGxlYWRpbmctNlwiPlxuICAgICAgICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cInRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgIHR3PVwiY3Vyc29yLXBvaW50ZXIgYmctdHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICAgICAgbm9QYWRkaW5nXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBjbG9zZVRyYW5zaXRpb24oKX0+XG4gICAgICAgICAgICAgICAgICAgIDxYSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2xcIlxuICAgICAgICAgICAgICAgIG92ZXJmbG93PXtcIm92ZXJmbG93LXktYXV0b1wifVxuICAgICAgICAgICAgICAgIHR3PVwicmVsYXRpdmUgZmxleC0xIHJvdW5kZWQgcHgtMyBweS0zXCJcbiAgICAgICAgICAgICAgICBub1BhZGRpbmdcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIG5vUGFkZGluZ1xuICAgICAgICAgICAgICAgICAgZmxleFxuICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbj1cImNvbFwiXG4gICAgICAgICAgICAgICAgICBvdmVyZmxvdz17XCJvdmVyZmxvdy15LWF1dG9cIn1cbiAgICAgICAgICAgICAgICAgIHR3PVwib3ZlcmZsb3ctdmlzaWJsZSBweC0zIHB5LTNcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgPGRpdiB0dz1cImZsZXgtc2hyaW5rLTBcIj57Y29udGVudH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIHthY3Rpb24gJiYgKFxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGZsZXhcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiZXZlbmx5XCJcbiAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgdHc9XCJoLTE2IGJvcmRlci10IGJvcmRlci1ib3JkZXIgcmVsYXRpdmUgZmxleC1pbml0aWFsIHJvdW5kZWQgcm91bmRlZC10LW5vbmVcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgIDwvU2lkZXNoZWV0Q29udGVudD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5TaWRlc2hlZXQucHJvcFR5cGVzID0ge1xuICBjb250ZW50OiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LFxuICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBhY3Rpb246IFByb3BUeXBlcy5lbGVtZW50LFxuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgaXNTaG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZXNoZWV0O1xuIl19 */"]},react.jsx(index,{flex:!0,alignItems:"center",css:_ref2},react.jsx("div",{css:_ref3},I),react.jsx(index,{flex:!0,backgroundColor:"transparent",css:_ref4,noPadding:!0},react.jsx("div",{onClick:()=>W()},react.jsx(XIcon,null)))),react.jsx(index,{flex:!0,flexDirection:"col",overflow:"overflow-y-auto",css:_ref5,noPadding:!0},react.jsx(index,{noPadding:!0,flex:!0,flexDirection:"col",overflow:"overflow-y-auto",css:_ref6},react.jsx("div",{css:_ref7},A))),C&&react.jsx(index,{flex:!0,justifyContent:"evenly",alignItems:"center",css:_ref8},C))))};Sidesheet.propTypes={content:PropTypes__default.default.element,children:PropTypes__default.default.element,width:PropTypes__default.default.oneOfType([PropTypes__default.default.string,PropTypes__default.default.number]),action:PropTypes__default.default.element,onClose:PropTypes__default.default.func,isShown:PropTypes__default.default.bool,title:PropTypes__default.default.string},module.exports=Sidesheet;
